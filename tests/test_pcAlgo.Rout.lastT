
R version 2.4.0 (2006-10-03)
Copyright (C) 2006 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

Attaching package of SfS goodies.. Loading required package: stats
Loading required package: methods
Loading required package: utils
 ... and today's fortune() cookie is:

I'm really curious to know why the "two types" of sum of squares are called
"Type I" and "Type III"! This is a very common misconception, particularly
among SAS users who have been fed this nonsense quite often for all their
professional lives. Fortunately the reality is much simpler. There is, by any
sensible reckoning, only ONE type of sum of squares, and it always represents
an improvement sum of squares of the outer (or alternative) model over the
inner (or null hypothesis) model. What the SAS highly dubious classification of
sums of squares does is to encourage users to concentrate on the null
hypothesis model and to forget about the alternative. This is always a very bad
idea and not surprisingly it can lead to nonsensical tests, as in the test it
provides for main effects "even in the presence of interactions", something
which beggars definition, let alone belief.
   -- Bill Venables
      R-help (November 2000)

Working directory : /sfs/u/staff/kalisch/R/Pkgs/pcalg/tests  {change with setwd()}
> invisible(options(echo = TRUE))
> ## library(pcalg)
> library(pcalg,lib.loc="/u/kalisch/R/Pkgs/pcalg.Rcheck")
Loading required package: MASS
Loading required package: graph
Loading required package: Ruuid
Loading required package: robustbase

Attaching package: 'robustbase'


	The following object(s) are masked from package:sfsmisc :

	 huberM 

Loading required package: Rgraphviz
Loading required package: geneplotter
Loading required package: annotate
Loading required package: Biobase
Loading required package: tools

Welcome to Bioconductor

    Vignettes contain introductory material. To view, type
    'openVignette()' or start with 'help(Biobase)'. For details
    on reading vignettes, see the openVignette help page.

KernSmooth 2.22 installed
Copyright M. P. Wand 1997
Loading required package: ggm

Attaching package: 'ggm'


	The following object(s) are masked from package:graph :

	 edgeMatrix 

> 
> set.seed(2)
> cat("bla")
bla> ## Parameters
> p <- 5
> n <- 1000
> alpha <- 0.05
> s <- 0.6
> 
> mlb <- 0.1
> mub <- 1
> dag <- randomDAG(p,s,lB=mlb,uB=mub)
> data <- rmvDAG(n, dag)
> ## TODO: improve this, once we have print(),plot() methods:
> r1 <- pcAlgo(data,alpha, verbose=TRUE)
Order=0; remaining edges:20
Order=1; remaining edges:20
Order=2; remaining edges:12
Order=3; remaining edges:12
Final graph adjacency matrix:
              
[1,] . | | | .
[2,] | . . | .
[3,] | . . | .
[4,] | | | . |
[5,] . . . | .
> 
> if(dev.interactive()) {
+     op <- par(mfrow=c(1,2))
+     plot(dag,      main = "true")
+     plot(r1@graph, main = "estimate")
+     par(op)
+ }
> 
> ## check TPR, FPR and TDR for randomly generated data
> dag <- randomDAG(p,s,lB=mlb,uB=mub)
> data <- rmvDAG(n, dag)
> r <- pcAlgo(data,alpha,verbose=TRUE)
Order=0; remaining edges:20
Order=1; remaining edges:14
Order=2; remaining edges:12
Order=3; remaining edges:10
Final graph adjacency matrix:
              
[1,] . . . . |
[2,] . . | . |
[3,] . | . . |
[4,] . . . . |
[5,] | | | | .
> cgr <- compareGraphs(r@graph, dag)
> if (abs(round(cgr["tpr"]-0.83333333333,10))>1e-10)
+     stop("Inconsistent result in Testing test_pcAlgo.R")
> 
> if(dev.interactive()) {
+     c.cgr <- format(round(cgr, 3))
+     op <- par(mfrow=c(1,2))
+     plot(dag, main = "true")
+     plot(r@graph, main = "estimated skeleton")
+     mtext(paste(paste(toupper(names(c.cgr)), c.cgr, sep="= "),
+ 		collapse=", "))
+     par(op)
+ }
> 
> ## check generating CPDAG
> rD <- pcAlgo(data,alpha,verbose=TRUE,directed=TRUE)
Order=0; remaining edges:20
Order=1; remaining edges:14
Order=2; remaining edges:12
Order=3; remaining edges:10
Final graph adjacency matrix:
              
[1,] . . . . |
[2,] . . | . |
[3,] . | . . |
[4,] . . . . |
[5,] | | | | .
> (as(rD@graph,"matrix"))
  1 2 3 4 5
1 0 0 0 0 1
2 0 0 1 0 1
3 0 1 0 0 1
4 0 0 0 0 1
5 0 0 0 0 0
> 
> proc.time()
[1] 4.573 0.365 8.095 0.005 0.005
> 
